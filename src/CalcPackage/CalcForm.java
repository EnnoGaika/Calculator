/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CalcPackage;
 
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
/**
 *
 * @author CREYES-PC
 */
public class CalcForm extends javax.swing.JFrame {
    int operation = 0;
    double savedData = 0;    
    double newData = 0;
    double outputData = 0;
    boolean isDecimal = false;    
    double initialMemory = 0;
    ArrayList HistoryRepeat = new ArrayList();
    String action;
    int ctr = 1;
    String historyData;
    String[] array = (new String[0]);   
    ArrayList<String[]> historyList = new ArrayList<String[]>();    
    /**
     * Creates new form CalcForm
     */
    public CalcForm() {
        lock l = new lock();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Number = new javax.swing.ButtonGroup();
        mButtons = new javax.swing.ButtonGroup();
        Button = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        displayTextField = new javax.swing.JTextField();
        memoryClearButton = new javax.swing.JButton();
        memmorySaveButton = new javax.swing.JButton();
        memoryAddButton = new javax.swing.JButton();
        memoryMinusButton = new javax.swing.JButton();
        memoryRecallButton = new javax.swing.JButton();
        SevenTextButton = new javax.swing.JButton();
        EightTextButton = new javax.swing.JButton();
        NineTextButton = new javax.swing.JButton();
        FourTextButton = new javax.swing.JButton();
        FiveTextButton = new javax.swing.JButton();
        SixTextButton = new javax.swing.JButton();
        OneTextButton = new javax.swing.JButton();
        TwoTextButton = new javax.swing.JButton();
        ThreeTextButton = new javax.swing.JButton();
        equalsButton = new javax.swing.JButton();
        ZeroTextButton = new javax.swing.JButton();
        DecimalTextButton = new javax.swing.JButton();
        operationComboText = new javax.swing.JComboBox<>();
        clearButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        operationDisplay = new javax.swing.JTextField();
        negativeSignToggle = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyListView = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Clear = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        Copy = new javax.swing.JMenuItem();
        Paste = new javax.swing.JMenuItem();
        History = new javax.swing.JMenu();
        Export = new javax.swing.JMenuItem();
        Import = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 204));

        displayTextField.setEditable(false);
        displayTextField.setBackground(new java.awt.Color(51, 51, 51));
        displayTextField.setColumns(5);
        displayTextField.setFont(new java.awt.Font("Yu Gothic UI", 1, 48)); // NOI18N
        displayTextField.setForeground(new java.awt.Color(204, 204, 204));
        displayTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        displayTextField.setText("0");
        displayTextField.setToolTipText("");
        displayTextField.setBorder(null);
        displayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                displayTextFieldKeyTyped(evt);
            }
        });

        memoryClearButton.setBackground(new java.awt.Color(51, 51, 51));
        memoryClearButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        memoryClearButton.setForeground(new java.awt.Color(204, 204, 204));
        memoryClearButton.setText("MC");
        memoryClearButton.setToolTipText("");
        memoryClearButton.setBorder(null);
        memoryClearButton.setBorderPainted(false);
        Button.add(memoryClearButton);
        memoryClearButton.setFocusable(false);
        memoryClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryClearButtonActionPerformed(evt);
            }
        });

        memmorySaveButton.setBackground(new java.awt.Color(51, 51, 51));
        memmorySaveButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        memmorySaveButton.setForeground(new java.awt.Color(204, 204, 204));
        memmorySaveButton.setText("MS");
        memmorySaveButton.setBorder(null);
        memmorySaveButton.setBorderPainted(false);
        Button.add(memmorySaveButton);
        memmorySaveButton.setFocusable(false);
        memmorySaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memmorySaveButtonActionPerformed(evt);
            }
        });

        memoryAddButton.setBackground(new java.awt.Color(51, 51, 51));
        memoryAddButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        memoryAddButton.setForeground(new java.awt.Color(204, 204, 204));
        memoryAddButton.setText("M+");
        memoryAddButton.setBorder(null);
        memoryAddButton.setBorderPainted(false);
        Button.add(memoryAddButton);
        memoryAddButton.setFocusable(false);
        memoryAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryAddButtonActionPerformed(evt);
            }
        });

        memoryMinusButton.setBackground(new java.awt.Color(51, 51, 51));
        memoryMinusButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        memoryMinusButton.setForeground(new java.awt.Color(204, 204, 204));
        memoryMinusButton.setText("M-");
        memoryMinusButton.setBorder(null);
        memoryMinusButton.setBorderPainted(false);
        Button.add(memoryMinusButton);
        memoryMinusButton.setFocusable(false);
        memoryMinusButton.setMaximumSize(new java.awt.Dimension(55, 23));
        memoryMinusButton.setMinimumSize(new java.awt.Dimension(55, 23));
        memoryMinusButton.setPreferredSize(new java.awt.Dimension(55, 23));
        memoryMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryMinusButtonActionPerformed(evt);
            }
        });

        memoryRecallButton.setBackground(new java.awt.Color(51, 51, 51));
        memoryRecallButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        memoryRecallButton.setForeground(new java.awt.Color(204, 204, 204));
        memoryRecallButton.setText("MR");
        memoryRecallButton.setBorder(null);
        memoryRecallButton.setBorderPainted(false);
        Button.add(memoryRecallButton);
        memoryRecallButton.setFocusable(false);
        memoryRecallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryRecallButtonActionPerformed(evt);
            }
        });

        SevenTextButton.setBackground(new java.awt.Color(0, 0, 0));
        SevenTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        SevenTextButton.setForeground(new java.awt.Color(204, 204, 204));
        SevenTextButton.setText("7");
        SevenTextButton.setToolTipText("");
        SevenTextButton.setBorder(null);
        SevenTextButton.setBorderPainted(false);
        Button.add(SevenTextButton);
        SevenTextButton.setFocusable(false);
        SevenTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SevenTextButtonActionPerformed(evt);
            }
        });

        EightTextButton.setBackground(new java.awt.Color(0, 0, 0));
        EightTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        EightTextButton.setForeground(new java.awt.Color(204, 204, 204));
        EightTextButton.setText("8");
        EightTextButton.setBorder(null);
        EightTextButton.setBorderPainted(false);
        Button.add(EightTextButton);
        EightTextButton.setFocusable(false);
        EightTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EightTextButtonActionPerformed(evt);
            }
        });

        NineTextButton.setBackground(new java.awt.Color(0, 0, 0));
        NineTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        NineTextButton.setForeground(new java.awt.Color(204, 204, 204));
        NineTextButton.setText("9");
        NineTextButton.setBorder(null);
        NineTextButton.setBorderPainted(false);
        Button.add(NineTextButton);
        NineTextButton.setFocusable(false);
        NineTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NineTextButtonActionPerformed(evt);
            }
        });

        FourTextButton.setBackground(new java.awt.Color(0, 0, 0));
        FourTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        FourTextButton.setForeground(new java.awt.Color(204, 204, 204));
        FourTextButton.setText("4");
        FourTextButton.setBorder(null);
        FourTextButton.setBorderPainted(false);
        Button.add(FourTextButton);
        FourTextButton.setFocusable(false);
        FourTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FourTextButtonActionPerformed(evt);
            }
        });

        FiveTextButton.setBackground(new java.awt.Color(0, 0, 0));
        FiveTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        FiveTextButton.setForeground(new java.awt.Color(204, 204, 204));
        FiveTextButton.setText("5");
        FiveTextButton.setBorder(null);
        FiveTextButton.setBorderPainted(false);
        Button.add(FiveTextButton);
        FiveTextButton.setFocusable(false);
        FiveTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiveTextButtonActionPerformed(evt);
            }
        });

        SixTextButton.setBackground(new java.awt.Color(0, 0, 0));
        SixTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        SixTextButton.setForeground(new java.awt.Color(204, 204, 204));
        SixTextButton.setText("6");
        SixTextButton.setBorder(null);
        SixTextButton.setBorderPainted(false);
        Button.add(SixTextButton);
        SixTextButton.setFocusable(false);
        SixTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SixTextButtonActionPerformed(evt);
            }
        });

        OneTextButton.setBackground(new java.awt.Color(0, 0, 0));
        OneTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        OneTextButton.setForeground(new java.awt.Color(204, 204, 204));
        OneTextButton.setText("1");
        OneTextButton.setBorder(null);
        OneTextButton.setBorderPainted(false);
        Button.add(OneTextButton);
        OneTextButton.setFocusable(false);
        OneTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OneTextButtonActionPerformed(evt);
            }
        });

        TwoTextButton.setBackground(new java.awt.Color(0, 0, 0));
        TwoTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        TwoTextButton.setForeground(new java.awt.Color(204, 204, 204));
        TwoTextButton.setText("2");
        TwoTextButton.setBorder(null);
        TwoTextButton.setBorderPainted(false);
        Button.add(TwoTextButton);
        TwoTextButton.setFocusable(false);
        TwoTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TwoTextButtonActionPerformed(evt);
            }
        });

        ThreeTextButton.setBackground(new java.awt.Color(0, 0, 0));
        ThreeTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        ThreeTextButton.setForeground(new java.awt.Color(204, 204, 204));
        ThreeTextButton.setText("3");
        ThreeTextButton.setBorder(null);
        ThreeTextButton.setBorderPainted(false);
        Button.add(ThreeTextButton);
        ThreeTextButton.setFocusable(false);
        ThreeTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThreeTextButtonActionPerformed(evt);
            }
        });

        equalsButton.setBackground(new java.awt.Color(153, 153, 153));
        equalsButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 36)); // NOI18N
        equalsButton.setText("=");
        equalsButton.setBorder(null);
        equalsButton.setBorderPainted(false);
        Button.add(equalsButton);
        equalsButton.setFocusable(false);
        equalsButton.setNextFocusableComponent(displayTextField);
        equalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsButtonActionPerformed(evt);
            }
        });

        ZeroTextButton.setBackground(new java.awt.Color(0, 0, 0));
        ZeroTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        ZeroTextButton.setForeground(new java.awt.Color(204, 204, 204));
        ZeroTextButton.setText("0");
        ZeroTextButton.setBorder(null);
        ZeroTextButton.setBorderPainted(false);
        Button.add(ZeroTextButton);
        ZeroTextButton.setFocusable(false);
        ZeroTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeroTextButtonActionPerformed(evt);
            }
        });

        DecimalTextButton.setBackground(new java.awt.Color(0, 0, 0));
        DecimalTextButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        DecimalTextButton.setForeground(new java.awt.Color(204, 204, 204));
        DecimalTextButton.setText(".");
        DecimalTextButton.setBorder(null);
        DecimalTextButton.setBorderPainted(false);
        Button.add(DecimalTextButton);
        DecimalTextButton.setFocusable(false);
        DecimalTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecimalTextButtonActionPerformed(evt);
            }
        });

        operationComboText.setBackground(new java.awt.Color(102, 102, 102));
        operationComboText.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        operationComboText.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ADDITION", "SUBTRACT", "MULTIPLY", "DIVISION" }));
        operationComboText.setFocusable(false);
        operationComboText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                operationComboTextInputMethodTextChanged(evt);
            }
        });
        operationComboText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operationComboTextActionPerformed(evt);
            }
        });

        clearButton.setBackground(new java.awt.Color(153, 153, 153));
        clearButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        clearButton.setText("CLEAR");
        clearButton.setBorder(null);
        clearButton.setBorderPainted(false);
        Button.add(clearButton);
        clearButton.setFocusable(false);
        clearButton.setNextFocusableComponent(displayTextField);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(153, 153, 153));
        deleteButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        deleteButton.setText("DELETE");
        deleteButton.setBorder(null);
        deleteButton.setBorderPainted(false);
        Button.add(deleteButton);
        deleteButton.setFocusable(false);
        deleteButton.setNextFocusableComponent(displayTextField);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        operationDisplay.setEditable(false);
        operationDisplay.setBackground(new java.awt.Color(204, 204, 204));
        operationDisplay.setFont(new java.awt.Font("Yu Gothic UI", 1, 36)); // NOI18N
        operationDisplay.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        operationDisplay.setText("+");
        operationDisplay.setBorder(null);
        operationDisplay.setFocusable(false);
        operationDisplay.setNextFocusableComponent(displayTextField);

        negativeSignToggle.setBackground(new java.awt.Color(51, 51, 51));
        negativeSignToggle.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        negativeSignToggle.setForeground(new java.awt.Color(204, 204, 204));
        negativeSignToggle.setText("+/-");
        negativeSignToggle.setBorder(null);
        negativeSignToggle.setBorderPainted(false);
        Button.add(negativeSignToggle);
        negativeSignToggle.setFocusable(false);
        negativeSignToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeSignToggleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(displayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SevenTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(EightTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(NineTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(FourTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(FiveTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(SixTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(memoryAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(memoryMinusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(memoryClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(memoryRecallButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, 0)
                                .addComponent(negativeSignToggle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(OneTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(TwoTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ZeroTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ThreeTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DecimalTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(equalsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(memmorySaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(operationComboText, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(operationDisplay)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(operationComboText)
                    .addComponent(operationDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memmorySaveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(memoryClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(memoryRecallButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(memoryAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(memoryMinusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(negativeSignToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SevenTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(EightTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(NineTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FourTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FiveTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SixTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(OneTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TwoTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ThreeTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ZeroTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DecimalTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(equalsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        displayTextField.getAccessibleContext().setAccessibleName("");

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 24)); // NOI18N
        jLabel1.setText("History");
        jLabel1.setFocusable(false);

        jScrollPane1.setFocusable(false);

        historyListView.setBackground(new java.awt.Color(153, 153, 153));
        historyListView.setToolTipText("");
        jScrollPane1.setViewportView(historyListView);

        jLabel2.setText("Hist_ID");
        jLabel2.setFocusable(false);

        jLabel3.setText("Hist_Action");
        jLabel3.setFocusable(false);

        jLabel4.setText("Hist_Value");
        jLabel4.setFocusable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(0, 15, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(153, 153, 153));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(51, 51, 51)));

        File.setText("File");

        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });
        File.add(Clear);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        Edit.setText("Edit");

        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        Edit.add(Copy);

        Paste.setText("Paste");
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });
        Edit.add(Paste);

        jMenuBar1.add(Edit);

        History.setText("History");

        Export.setText("Export to Text");
        Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportActionPerformed(evt);
            }
        });
        History.add(Export);

        Import.setText("Import from Text");
        Import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportActionPerformed(evt);
            }
        });
        History.add(Import);

        jMenuBar1.add(History);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void memmorySaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memmorySaveButtonActionPerformed
        initialMemory = Double.parseDouble(displayTextField.getText());
        displayTextField.setText(formatDouble(initialMemory));
            action = "MEMORY SAVE";
            writeHistory(formatDouble(initialMemory));
    }//GEN-LAST:event_memmorySaveButtonActionPerformed
    private void memoryClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryClearButtonActionPerformed
            initialMemory = 0;
            displayTextField.setText(formatDouble(initialMemory));        
            savedData = 0;
            isDecimal= false;
            action = "M CLEAR";
            writeHistory(formatDouble(initialMemory));
    }//GEN-LAST:event_memoryClearButtonActionPerformed
    private void EightTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EightTextButtonActionPerformed
        InputDisplay("8");
    }//GEN-LAST:event_EightTextButtonActionPerformed
    private void FiveTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiveTextButtonActionPerformed
        InputDisplay("5");
    }//GEN-LAST:event_FiveTextButtonActionPerformed
    private void OneTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OneTextButtonActionPerformed
        InputDisplay("1");
    }//GEN-LAST:event_OneTextButtonActionPerformed
    private void TwoTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TwoTextButtonActionPerformed
        InputDisplay("2");
    }//GEN-LAST:event_TwoTextButtonActionPerformed
    private void operationComboTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operationComboTextActionPerformed
        operation = operationComboText.getSelectedIndex();
        ChangeOperation(operation);
    }//GEN-LAST:event_operationComboTextActionPerformed
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
            displayTextField.setText("0");
            savedData = 0;
            isDecimal= false;
            action = "CLEAR";
            writeHistory(formatDouble(savedData));
    }//GEN-LAST:event_clearButtonActionPerformed
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        StringBuilder backspaced = new StringBuilder(displayTextField.getText());
            boolean isitNegative = Double.parseDouble(displayTextField.getText()) < 0;
            if(backspaced.length() == 2  && isitNegative){
                        StringBuilder noNegative = new StringBuilder(displayTextField.getText());
                        noNegative = noNegative.deleteCharAt(0);
                        displayTextField.setText(noNegative.toString());
                        displayTextField.setText("0");
            }
                else if(backspaced.length() > 1){
                if(  Character.toString(backspaced.charAt(backspaced.length()-1)).equals(".") && isDecimal){
                        isDecimal = false;
                        displayTextField.setText(backspaced.deleteCharAt(backspaced.length()-1).toString());
                    }
                else{
                        displayTextField.setText(backspaced.deleteCharAt(backspaced.length()-1).toString());
                }
            }
            else{
                displayTextField.setText("0");
            }
    }//GEN-LAST:event_deleteButtonActionPerformed
    private void equalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsButtonActionPerformed
        Execute();
    }//GEN-LAST:event_equalsButtonActionPerformed
    private void displayTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_displayTextFieldKeyTyped
        try{
        String input = Character.toString(evt.getKeyChar());
        StringBuilder backspaced = new StringBuilder(displayTextField.getText());
        int keystroke = (int)evt.getKeyChar();
        
        boolean isitNegative = Double.parseDouble(displayTextField.getText()) < 0;
        if(input.matches("[0-9]")){
        InputDisplay(input);
        }
        else if(input.matches(".") && !isDecimal){
            isDecimal = true;
            InputDisplay(input);
        }
        else if( keystroke == 8 ){            
            if(backspaced.length() == 2  && isitNegative){
                        StringBuilder noNegative = new StringBuilder(displayTextField.getText());
                        noNegative = noNegative.deleteCharAt(0);
                        displayTextField.setText(noNegative.toString());
                        displayTextField.setText("0");
            }
                else if(backspaced.length() > 1){
                if(  Character.toString(backspaced.charAt(backspaced.length()-1)).equals(".") && isDecimal){
                        isDecimal = false;
                        displayTextField.setText(backspaced.deleteCharAt(backspaced.length()-1).toString());
                    }
                else{
                        displayTextField.setText(backspaced.deleteCharAt(backspaced.length()-1).toString());
                }
            }
            else{
                displayTextField.setText("0");
            }
        }
            switch (keystroke) {
                case 10 -> Execute();
                case 42 -> ChangeOperation(2);
                case 43 -> ChangeOperation(0);
                case 45 -> ChangeOperation(1);
                case 47 -> ChangeOperation(3);
                default -> {
                }
            }
        }catch(Exception e){
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_displayTextFieldKeyTyped
    private void operationComboTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_operationComboTextInputMethodTextChanged

    }//GEN-LAST:event_operationComboTextInputMethodTextChanged
    private void negativeSignToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeSignToggleActionPerformed
        
        boolean isitNegative = Double.parseDouble(displayTextField.getText()) < 0;
        if (!isitNegative && !displayTextField.getText().equals("0")){
            displayTextField.setText("-"+displayTextField.getText());
        }
        else if(isitNegative){
            StringBuilder noNegative = new StringBuilder(displayTextField.getText());
            noNegative = noNegative.deleteCharAt(0);
            displayTextField.setText(noNegative.toString());
        }
    }//GEN-LAST:event_negativeSignToggleActionPerformed
    private void ThreeTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThreeTextButtonActionPerformed
        InputDisplay("3");
    }//GEN-LAST:event_ThreeTextButtonActionPerformed
    private void FourTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FourTextButtonActionPerformed
        InputDisplay("4");
    }//GEN-LAST:event_FourTextButtonActionPerformed
    private void SixTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SixTextButtonActionPerformed
        InputDisplay("6");
    }//GEN-LAST:event_SixTextButtonActionPerformed
    private void SevenTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SevenTextButtonActionPerformed
        InputDisplay("7");
    }//GEN-LAST:event_SevenTextButtonActionPerformed
    private void NineTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NineTextButtonActionPerformed
        InputDisplay("9");
    }//GEN-LAST:event_NineTextButtonActionPerformed
    private void ZeroTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeroTextButtonActionPerformed
       InputDisplay("0");
    }//GEN-LAST:event_ZeroTextButtonActionPerformed
    private void DecimalTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecimalTextButtonActionPerformed
        String value = displayTextField.getText();
        if(!isDecimal){
                isDecimal = true;            
                displayTextField.setText(value + ".");
            }
    }//GEN-LAST:event_DecimalTextButtonActionPerformed
    private void memoryMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryMinusButtonActionPerformed
        initialMemory = initialMemory - Double.parseDouble(displayTextField.getText()) ;
        displayTextField.setText(formatDouble(initialMemory));
            action = "M MINUS";
            writeHistory(formatDouble(initialMemory));
    }//GEN-LAST:event_memoryMinusButtonActionPerformed
    private void memoryAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryAddButtonActionPerformed
        initialMemory = Double.parseDouble(displayTextField.getText()) + initialMemory;
        displayTextField.setText(formatDouble(initialMemory));
            action = "M PLUS";
            writeHistory(formatDouble(initialMemory));
    }//GEN-LAST:event_memoryAddButtonActionPerformed
    private void memoryRecallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryRecallButtonActionPerformed
        displayTextField.setText(formatDouble(initialMemory));
        displayTextField.setText(formatDouble(initialMemory));
            action = "RECALL";
            writeHistory(formatDouble(initialMemory));
    }//GEN-LAST:event_memoryRecallButtonActionPerformed
    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
            displayTextField.setText("0");
                savedData = 0;
                displayTextField.setText("0");
                isDecimal= false;
            action = "CLEAR";
            HistoryRepeat.clear();
            ctr = 1;
            writeHistory(formatDouble(savedData));
    }//GEN-LAST:event_ClearActionPerformed
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
System.out.println("terminating or closing java program");
       System.exit(100); //non zero value to exit says abnormal termination of JVM
    }//GEN-LAST:event_ExitActionPerformed

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        StringSelection stringSelection = new StringSelection (displayTextField.getText());
        Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
        clpbrd.setContents (stringSelection, null);
            action = "COPY";
            writeHistory(formatDouble(Double.parseDouble(displayTextField.getText())));
    }//GEN-LAST:event_CopyActionPerformed

    private void PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteActionPerformed
Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
    Transferable t = c.getContents(this);
    if (t == null)
        return;
    try {
        String pasteTest = (String) t.getTransferData(DataFlavor.stringFlavor);
        System.out.println(pasteTest);
        if(pasteTest.matches("[0-9]+.?") ){
            displayTextField.setText((String) t.getTransferData(DataFlavor.stringFlavor));
            action = "PASTE";
            writeHistory(formatDouble(Double.parseDouble(displayTextField.getText())));
        }else{
        }
    } catch (Exception e){
        e.printStackTrace();
    }//try12312321...

    }//GEN-LAST:event_PasteActionPerformed

    private void ImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportActionPerformed
        try {
            ArrayList<String> lines = new ArrayList<String>();
            
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Texts", "txt");
            chooser.setFileFilter(filter);
            int returnVal = chooser.showOpenDialog(this);
            File selectedFile = chooser.getSelectedFile();
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            }
            File importHistory = new File(selectedFile.getAbsolutePath());
            Scanner s = new Scanner(importHistory);
                    s.useDelimiter(Pattern.compile("(\\n)"));
            while (s.hasNext()) {
                //System.out.println(s.toString());
                lines.add(s.nextLine());
            } 
            System.out.println("afterwhile before array");
            String[] array = (String[]) lines.toArray(new String[0]);
            historyListView.setListData(array);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CalcForm.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_ImportActionPerformed

    private void ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportActionPerformed
        try {
            
            JFrame parentFrame = new JFrame();
 
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Specify a file to save");   

            int userSelection = fileChooser.showSaveDialog(parentFrame);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileSelected = fileChooser.getSelectedFile();    
                File fileLocation = new File(fileSelected.getPath() + ".txt");                
                File fileToSave = new File(fileLocation, fileSelected.getName());

            FileWriter filewriter = new FileWriter(fileLocation);
                try (BufferedWriter bufferedWriter = new BufferedWriter(filewriter)) {
                    for(String data: array){
                        bufferedWriter.write(data);
                        bufferedWriter.newLine();
                    }   }
            JOptionPane.showMessageDialog( null,  "Your File has been successfully saved. " + fileLocation);
            } 
        } catch (IOException e) {
            JOptionPane.showMessageDialog( null,  e);  
        }
    }//GEN-LAST:event_ExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalcForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalcForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalcForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalcForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalcForm().setVisible(true);
            }
        });
    }
    
    public void InputDisplay(String input){
        String display = displayTextField.getText();
        if(display.equals("0")){                                                // if diplay IS zero
            if( input.matches("[0-9.]") ){      
                if(input.matches("\\.")){                                         // if display has .
                    displayTextField.setText(display + input);
                }
                else{                                                           // if display DONT have .   
                    displayTextField.setText(input);
                }
            }
        }
        else{                                                                   //if display NOT zero
            if( input.matches("[0-9.]") ){
                if(display.indexOf('.') != -1){                                 // if display has .
                    if(input.matches("[0-9]") ){                                // if input ONLY has numbers
                        displayTextField.setText(display + input);
                    }
                }
                else{                                                           // if display DONT have .   
                    displayTextField.setText(display + input);
                }
            }
        }
    }
    
    public void ChangeOperation(int ope){
        try{
        char operationArray[];
        operationArray = new char[]{'+', '-','*','/'};
                savedData = Double.parseDouble(displayTextField.getText());
                operation = ope;
                operationComboText.setSelectedIndex(ope);
                action = operationComboText.getSelectedItem().toString();
                writeHistory(formatDouble(savedData));
                operationDisplay.setText(Character.toString(operationArray[ope]));
                displayTextField.setText("0");
                isDecimal = false;
        }catch(Exception e){
            System.out.println(e);
        }       
    }
    
    public void Execute(){
        newData = Double.parseDouble(displayTextField.getText());
        switch(operation){
            case 0 -> {
                outputData = savedData + newData;
                displayTextField.setText(formatDouble(outputData));
            }
            case 1 -> {
                outputData = savedData - newData;
                displayTextField.setText(formatDouble(outputData));
            }
            case 2 -> {
                outputData = savedData * newData;
                displayTextField.setText(formatDouble(outputData));
            }
            case 3 -> {
                outputData = savedData / newData;
                displayTextField.setText(formatDouble(outputData));
            }
            default -> {
            }
        }
            action = "EQUAL";
            writeHistory(formatDouble(outputData));
    }
    public static String formatDouble(double output){
    if(output == (long) output)
        return String.format("%d",(long)output);
    else
        return String.format("%s",output);
}
    public void writeHistory(String num){
        historyData = "       " + Integer.toString(ctr);   
        String outputtedNumber = num;
        if("NaN".equals(num) || "Infinity".equals(num)){
           outputtedNumber = "Error!";
           displayTextField.setText("0");
        }
        int actLength = action.length();
        switch(action){
            case "EQUAL"-> {
                actLength = 22-action.length();
            }
            case "CLEAR"-> {
                actLength = 22-action.length();
            }
            case "ADDITION" -> {
                actLength = 20-action.length();
            }
            case "M CLEAR" -> {
                actLength = 21-action.length();
            }
            case "SUBTRACT" -> {
                actLength = 17-action.length();
            }
            case "DIVISION" -> {
                actLength = 21-action.length();
            }
            case "M PLUS" -> {
                actLength = 23-action.length();
            }
            case "M MINUS" -> {
                actLength = 21-action.length();
            }
            case "RECALL" -> {
                actLength = 22-action.length();
            }
            case "MULTIPLY" -> {
                actLength = 19-action.length();
            }
            case "MEMORY SAVE" -> {
                actLength = 14-action.length();
            }
            case "COPY" -> {
                actLength = 23-action.length();
            }
            case "PASTE" -> {
                actLength = 22-action.length();
            }
            default -> {
            }
        } 
        for (int i = 0; i <= actLength; i++) {
            action = action + " ";
        } 
        if(Integer.toString(ctr).length()<2){
            historyData = historyData.concat("               ");            
//            historyData = "       " + Integer.toString(ctr)+ "              " + action + "                 " +  num;
        }
        else{
            historyData = historyData.concat("             "); 
        }
            historyData = historyData.concat(action);            
            historyData = historyData + outputtedNumber;
            ctr++;
            HistoryRepeat.add(historyData);
            array = (String[]) HistoryRepeat.toArray(new String[0]);
//            System.out.println(Arrays.toString(array));
            historyListView.setListData(array);
        

    }
        

public class lock {
    private  File f;
    private  FileChannel channel;
    private  FileLock lock;
 
    public lock()
    {
        try
        {
            f = new File("process.lock");
            // Check if the lock exist
            if (f.exists()) // if exist try to delete it
                f.delete();
            // Try to get the lock
            channel = new RandomAccessFile(f, "rw").getChannel();
            lock = channel.tryLock();
            if(lock == null)
            {
                // File is lock by other application
                channel.close();
                throw new RuntimeException("Two instance cant run at a time.");
            }
            // Add shutdown hook to release lock when application shutdown
            ShutdownHook shutdownHook = new ShutdownHook();
            Runtime.getRuntime().addShutdownHook(shutdownHook);
 
        }
        catch(IOException e)
        {
               throw new RuntimeException("Could not start process.", e);
        }
    }
 
    public void unlockFile() {
        // release and delete file lock
        try
        {
            if(lock != null)
            {
                lock.release();
                channel.close();
                f.delete();
            }
        }
        catch(IOException e)
        {
            e.printStackTrace();
        }
    }
 
    class ShutdownHook extends Thread {
        public void run() {
            unlockFile();
        }
    }
}
 
            

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Button;
    private javax.swing.JMenuItem Clear;
    private javax.swing.JMenuItem Copy;
    private javax.swing.JButton DecimalTextButton;
    private javax.swing.JMenu Edit;
    private javax.swing.JButton EightTextButton;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Export;
    private javax.swing.JMenu File;
    private javax.swing.JButton FiveTextButton;
    private javax.swing.JButton FourTextButton;
    private javax.swing.JMenu History;
    private javax.swing.JMenuItem Import;
    private javax.swing.JButton NineTextButton;
    private javax.swing.ButtonGroup Number;
    private javax.swing.JButton OneTextButton;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JButton SevenTextButton;
    private javax.swing.JButton SixTextButton;
    private javax.swing.JButton ThreeTextButton;
    private javax.swing.JButton TwoTextButton;
    private javax.swing.JButton ZeroTextButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField displayTextField;
    private javax.swing.JButton equalsButton;
    private javax.swing.JList<String> historyListView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup mButtons;
    private javax.swing.JButton memmorySaveButton;
    private javax.swing.JButton memoryAddButton;
    private javax.swing.JButton memoryClearButton;
    private javax.swing.JButton memoryMinusButton;
    private javax.swing.JButton memoryRecallButton;
    private javax.swing.JButton negativeSignToggle;
    private javax.swing.JComboBox<String> operationComboText;
    private javax.swing.JTextField operationDisplay;
    // End of variables declaration//GEN-END:variables
}
            
